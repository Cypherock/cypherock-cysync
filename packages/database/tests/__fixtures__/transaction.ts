import {
  IDatabase,
  ITransaction,
  ITransactionRepository,
  Status,
  TransactionType,
} from '@cypherock/db-interfaces';
import { ITestClass } from './types';

class TransactionData implements ITestClass<ITransaction> {
  name = 'Transaction';

  repo: ITransactionRepository;

  onlyRequired: ITransaction[] = [
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
    },
  ];

  partial = [];

  all = [];

  invalid: ITransaction[] = [
    {
      hash: 723912 as any,
      fees: [] as any,
      amount: null as any,
      status: 'test' as any,
      type: null as any,
      timestamp: 'random' as any,
      blockHeight: {} as any,
      inputs: null as any,
      outputs: 78 as any,
      accountId: 0 as any,
      confirmations: 'none' as any,
      extraData: 'data' as any,
      parentTransactionId: [2, 3, 4, 1] as any,
    },
    {
      hash: 723912 as any,
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: [] as any,
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: null as any,
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 'random' as any,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: {} as any,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 0 as any,
      confirmations: 0,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 'none' as any,
      extraData: {},
      parentTransactionId: 'test',
    },
    {
      hash: 'hash',
      fees: '0.002',
      amount: '1',
      status: Status.Failed,
      type: TransactionType.Receive,
      timestamp: 1234,
      blockHeight: 20934,
      inputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      outputs: [{ address: 'address1', amount: 'amount1', isMine: false }],
      accountId: 'account1',
      confirmations: 'none' as any,
      extraData: {},
      parentTransactionId: [2, 3, 4, 1] as any,
    },
  ];

  setRepository(db: IDatabase) {
    this.repo = db.transaction;
  }
}
export const transactionData = new TransactionData();
